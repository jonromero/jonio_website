<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jon.IO</title><link href="http://jon.io/" rel="alternate"></link><link href="http://jon.io/feeds/all.atom.xml" rel="self"></link><id>http://jon.io/</id><updated>2014-01-24T00:36:50+01:00</updated><entry><title>How to have 7 more days every month</title><link href="http://jon.io/how-to-have-7-more-days-every-month.html" rel="alternate"></link><updated>2014-01-24T00:36:50+01:00</updated><author><name>Jon V &lt;h2&gt;BigData. Startups. Trading.&lt;/h2&gt;</name></author><id>tag:jon.io,2014-01-24:how-to-have-7-more-days-every-month.html</id><summary type="html">&lt;p&gt;One of my year's resolution was "study one of your habits each month" and I decided to focus on what activities I am spending my online time. So, I installed &lt;a href="https://www.rescuetime.com/"&gt;RescueTime&lt;/a&gt; which is a very cool app that sits on the background and creates reports about which apps and sites you are using the most. And no, it is not sending that info to NSA (you are not that important!).&lt;/p&gt;
&lt;p&gt;Even though I spent most of my time working, writing and communicating, I also spent around 2 hours on average on Facebook (gasp!). No biggie. What I hated was that for the majority of times I was scrolling/refreshing for new updates.
Like opening your refrigirator every two minutes even though you know it is empty! Damn you habits!&lt;/p&gt;
&lt;p&gt;So, spending 2 hours every day (sometimes more) on Facebook, means 60 hours per month or &lt;em&gt;7 working days&lt;/em&gt;. 7 freaking working days each month. 7 days, each day with 8 full hours, to sleep, go out, exercise, write a book, learn something new.&lt;/p&gt;
&lt;p&gt;What I did was installing &lt;a href="stayfocusd.com"&gt;StayFocused&lt;/a&gt;, a free plugin for your browser that doesn't let you spent more than 10 minutes on specific sites everyday. And guess what. The "I am just using facebook to communicate" is such a lame excuse as I had no problem communicating with my friends, even by using facebook for 10 minutes.&lt;/p&gt;
&lt;p&gt;Now, give it a shot and tell me what you built in your spare time!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.twitter.com/jonromero"&gt;JR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="productivity"></category></entry><entry><title>Kicking time management in the nuts</title><link href="http://jon.io/kicking-time-management-in-the-nuts.html" rel="alternate"></link><updated>2013-12-30T18:41:43+01:00</updated><author><name>Jon V &lt;h2&gt;BigData. Startups. Trading.&lt;/h2&gt;</name></author><id>tag:jon.io,2013-12-30:kicking-time-management-in-the-nuts.html</id><summary type="html">&lt;p&gt;Building a Startup with pocket money and selling it for tons of cash in just two years, makes you learn a couple of tricks that change your life. One of those is time management.&lt;/p&gt;
&lt;p&gt;Time management is one of the decisive factors of making someone happy. Having lots of time can lead to boredom, having no time can lead to stress and anxiety. The funny thing is that it's so easy jumping from one extreme to the other and impossible to stay "in the zone". &lt;/p&gt;
&lt;p&gt;First of all, let me get something out of my chest: There is no such thing as "I have too many things to do that I need more than 24 hours a day". Bullshit. Even if you had 50 hours per day, you will still be struggling with todos. Why? Because, &lt;em&gt;time is irrelevant&lt;/em&gt;. Everything is about procedures.&lt;/p&gt;
&lt;p&gt;What I really hate about time management is tracking time. It is inefficient, I get bored quickly and you cannot focus 100% on a task everytime for each specific timeslot (unless you are a buddist monk). What I love to do is ticking off tasks. The pleasure of striking out a task that has been on your list for the last couple of weeks is the same as eating a Sundae ice-cream in the sun. Sometimes even better.&lt;/p&gt;
&lt;p&gt;I borrowed one of the most effective ways of "killing" tasks by a project management technic called &lt;a href="http://en.wikipedia.org/wiki/Scrum_(software_development)"&gt;Scrum&lt;/a&gt;. If you are in a Startup and haven't heard of Scrum, prepare to be amazed.&lt;/p&gt;
&lt;p&gt;Based on this method, you create periods of work (called &lt;em&gt;sprints&lt;/em&gt;) and you add things to be done in these periods. Why is this much better than just having a huge todo list? It breaks down tasks in large, high-level time blocks which are easier to manage and easier to extract information about how you (or your team) performs.&lt;/p&gt;
&lt;h2&gt;The Planning fallacy&lt;/h2&gt;
&lt;p&gt;Whenever I talk with a Startup that is struggling to go to a release or prototype, there is a reccuring theme: They all have tasks, some even have milestones but noone has a high-level &lt;em&gt;action&lt;/em&gt; plan on what needs to be done. &lt;/p&gt;
&lt;p&gt;We humans are pretty bad at calculating things that span more than a couple of weeks and what is worse, is that we suck at identifying this. It is an ego thing.&lt;/p&gt;
&lt;p&gt;So, roll up your sleeves and let's do a small test. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a list of all the things you need to do and assign a number of how important this item is (from 1 to 5)&lt;/li&gt;
&lt;li&gt;Add all the values and divide by the number of tasks (this is your average &lt;em&gt;velocity&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Organize the things in two groups (group A and group B). Make sure that each group has a summed value near to your average&lt;/li&gt;
&lt;li&gt;Take the first group (group A) and divide it again in two groups (group C and group D)&lt;/li&gt;
&lt;li&gt;Now, for the next two weeks, focus on resolving all the tasks in group C.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You might be wondering what is the great thing behind this and why this is so effective. First of all, it is a very easy system which translates to a very low abandonment rate. Second, even from the first week, you will be able to calculate your average velocity (which may be totally different from the one you calculated here) and "feel" the progress. And third, you will have a realistic feedback of how much work is for a single task versus the value this task actually delivers.&lt;/p&gt;
&lt;p&gt;What you should do when the second week is done, is to put any unresolved tasks back to the pool of tasks (called the &lt;em&gt;backlog&lt;/em&gt;) and re-organize your groups based on your newly calculated average velocity. As a rule of thumb, you should calculate your velocity every month.  &lt;/p&gt;
&lt;p&gt;Have in mind that there are more sophisticated systems (I'll talk more about them in an upcoming post) but my rule is that first you need something simple that works right now and then you can improve and iterate.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.twitter.com/jonromero"&gt;JR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="startups"></category></entry><entry><title>Mapping and processing data in Clojure</title><link href="http://jon.io/mapping-and-processing-data-in-clojure.html" rel="alternate"></link><updated>2013-09-04T12:35:46+02:00</updated><author><name>Jon V &lt;h2&gt;BigData. Startups. Trading.&lt;/h2&gt;</name></author><id>tag:jon.io,2013-09-04:mapping-and-processing-data-in-clojure.html</id><summary type="html">&lt;p&gt;I have to admit that I have a thing for DSLs. You can see it at &lt;a href="https://github.com/jonromero/music-as-data"&gt;music-as-data&lt;/a&gt; were notes and rhythm/beat is "mapped" to data and you can apply data transformations. &lt;/p&gt;
&lt;p&gt;The same thing I want to do with &lt;a href="http://en.wikipedia.org/wiki/Data_at_Rest"&gt;data at-rest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a scenario:
I have lots of data sitting as CSV on my hard-drive and I want to process them. Not query them. Process them.&lt;/p&gt;
&lt;p&gt;What would be really interesting is to be able to define (dynamically) a schema like that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defschema&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;EURUSD&amp;quot;&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tokenizer&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;.split&lt;/span&gt; &lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="c1"&gt;;; the mapping is done here&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;columns&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;open&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;high&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;low&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;close&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;volume&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let me explain.
First of all, a "tokenize" function. Each dataline is tokenized based on a function. Do you want regex? Something more complex? You are free to write anything you like. I really hate frameworks that you must write a complex regular expression or use a compicated system just to tokenize a line.&lt;/p&gt;
&lt;p&gt;As you can imagine, tokenize returns a list of data that are mapped to "columns".&lt;/p&gt;
&lt;p&gt;Now, the interesting stuff. &lt;/p&gt;
&lt;p&gt;You can write scripts like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;close&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="mf"&gt;1.45&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;place-order&lt;/span&gt; &lt;span class="ss"&gt;:buy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;place-order&lt;/span&gt; &lt;span class="ss"&gt;:sell&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thoughts? &lt;/p&gt;
&lt;p&gt;ping me here -&amp;gt; &lt;a href="http://www.twitter.com/jonromero"&gt;JR&lt;/a&gt;&lt;/p&gt;</summary><category term="databases"></category><category term="clojure"></category></entry><entry><title>HybrisDB</title><link href="http://jon.io/hybrisdb.html" rel="alternate"></link><updated>2013-08-04T20:31:21+02:00</updated><author><name>Jon V &lt;h2&gt;BigData. Startups. Trading.&lt;/h2&gt;</name></author><id>tag:jon.io,2013-08-04:hybrisdb.html</id><summary type="html">&lt;p&gt;I love Forex because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It has enormous amount of data (volume)&lt;/li&gt;
&lt;li&gt;These data are coming extremely fast (velocity)&lt;/li&gt;
&lt;li&gt;You need to consider multiple resources when you are building your strategy (variety)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My definition of BigData is that you have volume-velocity-variety information &lt;strong&gt;and&lt;/strong&gt; you need to react on it right now (realtime). It is one of the main reasons why I don't like Hadoop (ok, the other is because I don't like Java:). &lt;/p&gt;
&lt;p&gt;Forex is the best place if you want to start playing with BigData. You have (at least) one data channel, hitting you with data, you need to keep running algorithms on this stream (sometimes doing correlations up to a week) and you need be able to respond very fast. If a garbage collector kicks in or if you need to grab data from a database (even if this DB is in memory - long live Redis) then you will have issues.&lt;/p&gt;
&lt;p&gt;That's the reason why most of the "trading" databases have all their data in the same memory space and have custom languages doing the analysis (like &lt;a href="http://kx.com"&gt;Kdb&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;That was the inspiration for LDB.&lt;/p&gt;
&lt;p&gt;Millions of data sources (mobile phones), hitting your database and calculating/updating for each one of the requests thousands of counters and running all sorts of algorithms. Per request. In realtime.&lt;/p&gt;
&lt;p&gt;But let's face it. The vast majority of users/companies will never have millions (or even thousands) of requests hitting their servers. That's why I started a new opensource database with codename: HybrisDB.&lt;/p&gt;
&lt;p&gt;HDB has the following characteristics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Simple to install (no moving parts)&lt;/li&gt;
&lt;li&gt;Simple to use (pre-defined dashboards)&lt;/li&gt;
&lt;li&gt;It will be perfect for the 99% of users/companies but not for the 1% like Facebook or Google (sacrificing Enterprise features)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The concept is to have a dashboard, to watch indicators going on/off and then (maybe) connect to a system to place an order.&lt;/p&gt;
&lt;p&gt;Sounds like an interesting cool hobby project and I still try to decide between using Erlang or Clojure for this.&lt;/p&gt;
&lt;p&gt;Ping me on &lt;a href="http://www.twitter.com/jonromero"&gt;twitter&lt;/a&gt; if you have any ideas!&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;p&gt;JR&lt;/p&gt;</summary><category term="databases"></category><category term="hybrisdb"></category></entry><entry><title>New blog!</title><link href="http://jon.io/new-blog.html" rel="alternate"></link><updated>2013-07-31T00:49:33+02:00</updated><author><name>Jon V &lt;h2&gt;BigData. Startups. Trading.&lt;/h2&gt;</name></author><id>tag:jon.io,2013-07-31:new-blog.html</id><summary type="html">&lt;p&gt;I haven't blogged for a while and I think that I needed I new (virtual) home for my rants.
This place is brand new (and white!) and it is going to be awesome!&lt;/p&gt;
&lt;p&gt;I don't know what will happen with my previous domain (&lt;a href="http://jon.is.emotionull.com"&gt;emotionull&lt;/a&gt;) but I think it might be the new home for a new (underground) social network for traders. We'll see.&lt;/p&gt;
&lt;p&gt;My hobby project right now, is a new opensource trading platform (for the first time not focused on HFT) and some experiments around a super fast, vertical scaling, full adhoc queries database (exactly the opposite of &lt;a href="http://www.bugsense.com/about/bigdata"&gt;LDB&lt;/a&gt; I've built at &lt;a href="http://www.bugsense.com"&gt;BugSense&lt;/a&gt;). I'll keep you posted.&lt;/p&gt;
&lt;p&gt;Good times!&lt;/p&gt;
&lt;p&gt;JR&lt;/p&gt;</summary><category term="intro"></category></entry></feed>